<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GDY&#39;S BLOG</title>
  
  
  <link href="https://gedongyou.github.io/atom.xml" rel="self"/>
  
  <link href="https://gedongyou.github.io/"/>
  <updated>2025-01-03T15:18:09.395Z</updated>
  <id>https://gedongyou.github.io/</id>
  
  <author>
    <name>GDY</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Debian安装Dell OMSA</title>
    <link href="https://gedongyou.github.io/posts/%E5%AE%89%E8%A3%85-Dell-OMSA/"/>
    <id>https://gedongyou.github.io/posts/%E5%AE%89%E8%A3%85-Dell-OMSA/</id>
    <published>2025-01-03T11:43:06.000Z</published>
    <updated>2025-01-03T15:18:09.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是OMSA"><a href="#什么是OMSA" class="headerlink" title="什么是OMSA"></a>什么是OMSA</h2><p>DELL OMSA的全称为Dell OpenManage Server Administrator，专注于解决系统部署、系统监控和系统变更管理问题。通过提供用户界面(GUI)和命令行界面(CLI)工具对本地和远程的服务器进行管理和监控。</p><blockquote><p><strong>OMSA是 IDRAC企业版的开源社区版，如果你已经有了IDRAC的企业授权，一般不需要安装OMSA。</strong></p></blockquote><h3 id="Dell-使用-APT-软件包管理器为-Ubuntu-和-Debian-系统提供专用的-OMSA-存储库。与存储库的通信通过-https-进行，因此请确保先安装以下包："><a href="#Dell-使用-APT-软件包管理器为-Ubuntu-和-Debian-系统提供专用的-OMSA-存储库。与存储库的通信通过-https-进行，因此请确保先安装以下包：" class="headerlink" title="Dell 使用 APT 软件包管理器为 Ubuntu 和 Debian 系统提供专用的 OMSA 存储库。与存储库的通信通过 https 进行，因此请确保先安装以下包："></a>Dell 使用 APT 软件包管理器为 Ubuntu 和 Debian 系统提供专用的 OMSA 存储库。与存储库的通信通过 https 进行，因此请确保先安装以下包：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ca-certificates apt-transport-https</span><br></pre></td></tr></table></figure><h3 id="然后添加-Dell-存储库："><a href="#然后添加-Dell-存储库：" class="headerlink" title="然后添加 Dell 存储库："></a>然后添加 Dell 存储库：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo echo &quot;deb http://linux.dell.com/repo/community/ubuntu xenial openmanage/840&quot; &gt; /etc/apt/sources.list.d/linux.dell.com.sources.list</span><br></pre></td></tr></table></figure><h3 id="要添加-Dell-公有-GPG-密钥，请执行以下操作："><a href="#要添加-Dell-公有-GPG-密钥，请执行以下操作：" class="headerlink" title="要添加 Dell 公有 GPG 密钥，请执行以下操作："></a>要添加 Dell 公有 GPG 密钥，请执行以下操作：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gpg --keyserver keyserver.ubuntu.com --recv-key 1285491434D8786F</span><br><span class="line"></span><br><span class="line">gpg -a --export 1285491434D8786F | sudo apt-key add - #后面的这个横杠一定要带</span><br></pre></td></tr></table></figure><h3 id="更新源："><a href="#更新源：" class="headerlink" title="更新源："></a>更新源：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><h3 id="安装以下元软件包之一以安装所需的-OMSA-功能："><a href="#安装以下元软件包之一以安装所需的-OMSA-功能：" class="headerlink" title="安装以下元软件包之一以安装所需的 OMSA 功能："></a>安装以下元软件包之一以安装所需的 OMSA 功能：</h3><table><thead><tr><th>软件包</th><th>功能</th></tr></thead><tbody><tr><td>srvadmin-all</td><td>— 安装所有 OMSA 组件</td></tr><tr><td>srvadmin-base *</td><td>— 仅安装基本 OMSA，不安装 Web 服务器</td></tr><tr><td>srvadmin-idrac *</td><td>— 安装组件以管理 iDRAC</td></tr><tr><td>srvadmin-idrac7 *</td><td>— 安装组件以管理 iDRAC7</td></tr><tr><td>srvadmin-idracadm8</td><td>— 安装组件以管理 iDRAC8</td></tr><tr><td>srvadmin-webserver *</td><td>— 安装 Web 界面</td></tr><tr><td>srvadmin-storageservices *</td><td>— 安装 RAID 管理</td></tr><tr><td>dtk-scripts</td><td>— 安装 DTK</td></tr><tr><td>dcism</td><td>— 安装 iDRAC 服务模块(ISM)</td></tr></tbody></table><h3 id="例如，要安装所有-OMSA组件："><a href="#例如，要安装所有-OMSA组件：" class="headerlink" title="例如，要安装所有 OMSA组件："></a>例如，要安装所有 OMSA组件：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install srvadmin-all</span><br></pre></td></tr></table></figure><h2 id="启动cli模式"><a href="#启动cli模式" class="headerlink" title="启动cli模式"></a>启动cli模式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo omsaservicedataeng start</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是OMSA&quot;&gt;&lt;a href=&quot;#什么是OMSA&quot; class=&quot;headerlink&quot; title=&quot;什么是OMSA&quot;&gt;&lt;/a&gt;什么是OMSA&lt;/h2&gt;&lt;p&gt;DELL OMSA的全称为Dell OpenManage Server Administrator，</summary>
      
    
    
    
    
    <category term="教程" scheme="https://gedongyou.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="PVE" scheme="https://gedongyou.github.io/tags/PVE/"/>
    
  </entry>
  
  <entry>
    <title>玩转console.log</title>
    <link href="https://gedongyou.github.io/posts/%E7%8E%A9%E8%BD%ACconsole.log/"/>
    <id>https://gedongyou.github.io/posts/%E7%8E%A9%E8%BD%ACconsole.log/</id>
    <published>2023-07-27T07:48:54.000Z</published>
    <updated>2025-01-03T15:03:03.255Z</updated>
    
    <content type="html"><![CDATA[<h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h3><p><code>console.log()</code> 方法向 Web 控制台输出一条信息，在传递给 <code>console</code> 的方法的时候使用下面的字符以期进行参数的替换。</p><table><thead><tr><th>格式占位符</th><th>作用</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d 或 %i</td><td>整数</td></tr><tr><td>%f</td><td>浮点数</td></tr><tr><td>%o</td><td>可展开的DOM</td></tr><tr><td>%O</td><td>列出DOM的属性</td></tr><tr><td>%c</td><td>根据提供的css样式格式化字符串</td></tr></tbody></table><p>而彩蛋的实现可以使用 <code>%c</code> 为打印内容定义样式，指令前的文本不会受到影响，但指令后的文本将会使用参数中声明的 CSS 样式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;控制台 %c小彩蛋&quot;, &quot;font-size: 20px; color: #fff; border-radius: 5px; padding: 10px 25px;background: linear-gradient(315deg, #cdb4db 0%, #ffafcc 50%, #a2d2ff 100%)&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/v2-aa7ce457de2c8a0a4fe7ef40e7281cda_b.jpg"></p><h2 id="图片彩蛋"><a href="#图片彩蛋" class="headerlink" title="图片彩蛋"></a>图片彩蛋</h2><p>打印图片 ️ 的实现思路如下：</p><h3 id="背景图像"><a href="#背景图像" class="headerlink" title="背景图像"></a>背景图像</h3><p>由于只能定义样式，所以 <code>console</code> 不支持 <code>&lt;img&gt;</code> 标签，只支持使用 <code>background-image</code> 来设置背景图。⚠️ 需要注意的是，设置背景图需要带有文本内容，不然是不生效的，因此在 <code>%c</code> 后面留有一个空白字符是必要的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var style = [</span><br><span class="line">  `background: url($&#123;url&#125;) center center no-repeat`,</span><br><span class="line">].join(&#x27; &#x27;);</span><br><span class="line">console.log(&quot;%c &quot;, style);</span><br></pre></td></tr></table></figure><h3 id="尺寸大小"><a href="#尺寸大小" class="headerlink" title="尺寸大小"></a>尺寸大小</h3><ul><li><p>由于不支持设置 <code>width</code> 和 <code>height</code>，需要使用 <code>padding</code> 和 <code>line-height</code> 来代替宽高；  </p></li><li><p><code>font-size</code> 需要设置为0，让字体不占用空间，否则空白字符也会撑出空间；  </p></li><li><p><code>padding</code> 不可缺少，否则只靠 <code>line-height</code> 高度虽然撑起来了但是会显示空白；  </p></li><li><p><strong>chrome</strong> 浏览器不能设置 <code>line-height</code>，否则高度是图片高度的 2倍；  </p></li><li><p>非 <strong>chrome</strong> 浏览器 需要设置 <code>line-height</code>，否则高度只靠 <code>padding</code> 撑不起来。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;font-size: 0px;&#x27;,</span><br><span class="line">!isChromium ? `line-height: $&#123;this.height&#125;px;` : &#x27;&#x27;,</span><br><span class="line">`padding: $&#123;this.height / 2&#125;px $&#123;this.width / 2&#125;px;`,</span><br></pre></td></tr></table></figure><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>另外，部分浏览器不支持网络图片路径，（即 <code>background: url(&#39;https://xxx.png&#39;)</code> ），比如 chrome 会显示空白 ：</p><p><img src="https://pic3.zhimg.com/v2-123a0ad1c27161a14c7af464b036ddfa_b.jpg"></p><p>考虑到兼容性问题，可以采用 <strong>base64</strong> 的方式。但是如果图片较大，或者色彩比较丰富，那么其 <strong>base64</strong> 编码后的字符串会非常大，可以通过 <code>fetch</code> 请求实时地将图片转成 base64：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async function getBase64FromUrl (url) &#123;</span><br><span class="line">    const data = await fetch(url);</span><br><span class="line">    const blob = await data.blob();</span><br><span class="line">    return new Promise((resolve) =&gt; &#123;</span><br><span class="line">        const reader = new FileReader();</span><br><span class="line">        reader.readAsDataURL(blob);</span><br><span class="line">        reader.onloadend = () =&gt; &#123;</span><br><span class="line">            const base64data = reader.result;</span><br><span class="line">            resolve(base64data);</span><br><span class="line">        &#125;</span><br><span class="line">        reader.onerror = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展-console"><a href="#扩展-console" class="headerlink" title="扩展 console"></a>扩展 console</h3><p>最后扩展 <strong>console</strong> 对象，添加 <strong>image</strong> 方法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.image = function(url) &#123;</span><br><span class="line">  const image = new Image();</span><br><span class="line">  image.onload = function () &#123;</span><br><span class="line">    var isChromium = navigator.userAgent.match(/chrome|chromium|crios/i) &amp;&amp; !!window.chrome;</span><br><span class="line">  var style = [</span><br><span class="line">    &#x27;font-size: 0px;&#x27;,</span><br><span class="line">    !isChromium ? `line-height: $&#123;this.height&#125;px;` : &#x27;&#x27;,</span><br><span class="line">    `padding: $&#123;this.height / 2&#125;px $&#123;this.width / 2&#125;px;`,</span><br><span class="line">    `background: url($&#123;url&#125;) center center no-repeat;`,</span><br><span class="line">    &#x27;background-size: contain;&#x27;,</span><br><span class="line">  ].join(&#x27; &#x27;);</span><br><span class="line">  console.log(&#x27;%c &#x27;, style);</span><br><span class="line">  &#125;;</span><br><span class="line">  image.src = url;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getBase64FromUrl(imgUrl).then(console.image);</span><br></pre></td></tr></table></figure><h2 id="⚠️-注意"><a href="#⚠️-注意" class="headerlink" title="⚠️ 注意"></a>⚠️ 注意</h2><p>有一点要提醒大家，<strong>Firefox</strong> 只支持 <strong>8kb</strong> 大小的图片资源，一旦超过这个数量就会显示空白。如果需要兼容火狐的，建议把图片压缩至 8kb 以下。</p><p><img src="https://pic4.zhimg.com/v2-11d3f56f2abb54d1c6d8236064d72293_b.png"></p><h3 id="ASSII-Aar"><a href="#ASSII-Aar" class="headerlink" title="ASSII-Aar"></a>ASSII-Aar</h3><p>输出字符串并修改字体颜色。唯一需要注意的是转义字符！！<br>我模拟一个（时刻注意转义字符 \ 和 ` 等)</p><p><img src="https://i.imgtg.com/2023/07/27/OizkoI.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ascii = `</span><br><span class="line"></span><br><span class="line">┏━━━┓┏━━━┓┏┓━━┏┓┏┓┏━━━┓━━━━┏━━┓━┏┓━━━┏━━━┓┏━━━┓</span><br><span class="line">┃┏━┓┃┗┓┏┓┃┃┗┓┏┛┃┃┃┃┏━┓┃━━━━┃┏┓┃━┃┃━━━┃┏━┓┃┃┏━┓┃</span><br><span class="line">┃┃━┗┛━┃┃┃┃┗┓┗┛┏┛┗┛┃┗━━┓━━━━┃┗┛┗┓┃┃━━━┃┃━┃┃┃┃━┗┛</span><br><span class="line">┃┃┏━┓━┃┃┃┃━┗┓┏┛━━━┗━━┓┃━━━━┃┏━┓┃┃┃━┏┓┃┃━┃┃┃┃┏━┓</span><br><span class="line">┃┗┻━┃┏┛┗┛┃━━┃┃━━━━┃┗━┛┃━━━━┃┗━┛┃┃┗━┛┃┃┗━┛┃┃┗┻━┃</span><br><span class="line">┗━━━┛┗━━━┛━━┗┛━━━━┗━━━┛━━━━┗━━━┛┗━━━┛┗━━━┛┗━━━┛</span><br><span class="line"></span><br><span class="line">`</span><br><span class="line">console.log(`%c$&#123;ascii&#125;`,&#x27;color:#e59de3&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>推荐几个制作 ASSII-Art 的网站，都不需要科学上网就能访问，只是访问得有点慢。</p></blockquote><ul><li><p>可以制作图片的<a href="https://asciiart.club/">asciiart</a></p></li><li><p>制作英文和数字 <a href="https://lunicode.com/">lunicode</a></p></li><li><p>制作英文和数字 <a href="http://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20">patorjk</a></p></li><li><p>制作符号表情 <a href="http://1lineart.kulaone.com/">1lineart</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;console-log&quot;&gt;&lt;a href=&quot;#console-log&quot; class=&quot;headerlink&quot; title=&quot;console.log&quot;&gt;&lt;/a&gt;console.log&lt;/h3&gt;&lt;p&gt;&lt;code&gt;console.log()&lt;/code&gt; 方法向 Web</summary>
      
    
    
    
    
    <category term="教程" scheme="https://gedongyou.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="console.log" scheme="https://gedongyou.github.io/tags/console-log/"/>
    
  </entry>
  
  <entry>
    <title>eu.org域名申请教程</title>
    <link href="https://gedongyou.github.io/posts/eu-org%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B/"/>
    <id>https://gedongyou.github.io/posts/eu-org%E5%9F%9F%E5%90%8D%E7%94%B3%E8%AF%B7%E6%95%99%E7%A8%8B/</id>
    <published>2023-07-03T00:11:04.000Z</published>
    <updated>2024-08-08T07:25:58.955Z</updated>
    
    <content type="html"><![CDATA[<p>eu.org免费域名从1996年就有了，由此可见是非常非常早，计划是专门给无力承担费用的一些组织使用的，现在我们来申请一个。</p><p>注册地址：<a href="https://nic.eu.org/arf/en/login/?next=/arf/en/">https://nic.eu.org/arf/en/login/?next=/arf/en/</a></p><p>点击：Register</p><p>然后成功后到邮箱（垃圾箱）找到邮件、激活，然后登录。</p><p>点击登录，然后点击：New domain</p><p>填写理想的完整域名例如：abcde.eu.org 同意协议；</p><p>域名服务器建议填写下面两个dnspod，否则无法转到cloudflare。</p><p>edmund.dnspod.net<br>dempsey.dnspod.net</p><p>这里先只选择server names，然后Submit，注意看检查页面，如果出现 No error,Done.说明成功了~</p><p>如果有错误，请返回修改！</p><p>域名审核1天——30天都有可能，所以慢慢等吧，经过我的测试，一个账号内最多可以申请4个免费域名。</p><p>eu.org域名通过后是有邮件通知的，但是都在垃圾箱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;eu.org免费域名从1996年就有了，由此可见是非常非常早，计划是专门给无力承担费用的一些组织使用的，现在我们来申请一个。&lt;/p&gt;
&lt;p&gt;注册地址：&lt;a href=&quot;https://nic.eu.org/arf/en/login/?next=/arf/en/&quot;&gt;https</summary>
      
    
    
    
    
    <category term="域名" scheme="https://gedongyou.github.io/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="教程" scheme="https://gedongyou.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hexo的搭建</title>
    <link href="https://gedongyou.github.io/posts/hexo%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>https://gedongyou.github.io/posts/hexo%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-06-20T11:20:44.000Z</published>
    <updated>2024-08-08T07:25:53.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GitHub-Pages-是什么？"><a href="#GitHub-Pages-是什么？" class="headerlink" title="# GitHub Pages 是什么？"></a><strong># GitHub Pages 是什么？</strong></h3><ul><li><a href="https://link.zhihu.com/?target=https://help.github.com/en/articles/what-is-github-pages">What is GitHub Pages? - GitHub Help</a></li></ul><p>GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。</p><h3 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="# Hexo 是什么？"></a><strong># Hexo 是什么？</strong></h3><ul><li>官网：<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">hexo.io</a></li></ul><p>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</p><h3 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="# Hexo + GitHub 文章发布原理"></a><strong># Hexo + GitHub 文章发布原理</strong></h3><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p><p><img src="https://pic3.zhimg.com/v2-a193a47cf70fe6ecf156e5f3d34920ea_r.jpg"></p><h3 id="优点和不足"><a href="#优点和不足" class="headerlink" title="# 优点和不足"></a><strong># 优点和不足</strong></h3><p><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</p><p><strong>不足：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</p><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="# 注意事项"></a><strong># 注意事项</strong></h3><ul><li>输入代码时，核对准确，最好切换成英文输入法；</li><li>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</li><li>统一使用 Git Bash 进行操作（支持 Win、Mac）；</li><li>小白请严格按步骤进行，不要跳！</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="# 环境搭建"></a><strong># 环境搭建</strong></h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code> 并回车，如下图出现程序版本号即可。</p><p><img src="https://pic1.zhimg.com/80/v2-27b47b5ae479ce7987851292a67774b0_1440w.webp"></p><h2 id="2-连接-Github"><a href="#2-连接-Github" class="headerlink" title="2. 连接 Github"></a>2. 连接 Github</h2><p>使用邮箱注册 <a href="https://link.zhihu.com/?target=https://github.com/">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>:<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure><br><strong>创建 SSH 密匙</strong>：</p><p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p><p><strong>添加密匙：</strong></p><p>进入 [C:\Users\用户名\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><img src="https://pic1.zhimg.com/v2-9125065afd24332d7cd84feb6a350730_r.jpg"></p><p><strong>验证连接：</strong></p><p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。</p><p><img src="https://pic3.zhimg.com/v2-b4c7524a2451f4ab42f9c22ea3c7b6be_r.jpg"></p><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p><h2 id="3-创建-Github-Pages-仓库"><a href="#3-创建-Github-Pages-仓库" class="headerlink" title="3. 创建 Github Pages 仓库"></a>3. 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。</p><p><img src="https://pic2.zhimg.com/v2-67a8165154f4c5f4a6333e76e78ed815_r.jpg"></p><p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><h2 id="4-本地安装-Hexo-博客程序"><a href="#4-本地安装-Hexo-博客程序" class="headerlink" title="4. 本地安装 Hexo 博客程序"></a>4. 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。</p><h3 id="4-1-安装-Hexo"><a href="#4-1-安装-Hexo" class="headerlink" title="# 4.1 安装 Hexo"></a><strong># 4.1 安装 Hexo</strong></h3><p>使用 npm 一键安装 Hexo 博客程序：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>Mac 用户需要管理员权限（sudo），运行这条命令：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><br>安装时间有点久（真的很慢！），界面也没任何反应，<strong>耐心等待</strong>，安装完成后如下图。</p><p><img src="https://pic2.zhimg.com/v2-01e7fc8bb9280437deb437bf73a190a1_r.jpg"></p><h3 id="4-2-Hexo-初始化和本地预览"><a href="#4-2-Hexo-初始化和本地预览" class="headerlink" title="# 4.2 Hexo 初始化和本地预览"></a><strong># 4.2 Hexo 初始化和本地预览</strong></h3><p><strong>初始化并安装所需组件：</strong><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init      # 初始化</span><br><span class="line">npm install    # 安装组件</span><br></pre></td></tr></table></figure><br>完成后依次输入下面命令，<strong>启动本地服务器进行预览</strong>：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo s   # 启动预览</span><br></pre></td></tr></table></figure><br><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p><p><img src="https://pic4.zhimg.com/v2-1c3baeecf1ef3bec5c8ef3f14639f68b_r.jpg"></p><p><strong>Tips：</strong>如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 <code>hexo server -p 5000</code> 更改端口号后重试。</p><p>Hexo 博客文件夹目录结构如下：</p><p><img src="https://pic1.zhimg.com/v2-264c75c0e493ae8cc5f283567c64ff2c_r.jpg"></p><h2 id="5-部署-Hexo-到-GitHub-Pages"><a href="#5-部署-Hexo-到-GitHub-Pages" class="headerlink" title="5. 部署 Hexo 到 GitHub Pages"></a>5. 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先<strong>安装 hexo-deployer-git</strong>：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br>然后<strong>修改 _config.yml</strong> 文件末尾的 Deployment 部分，修改成如下：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><br>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="6-绑定域名（可选）"><a href="#6-绑定域名（可选）" class="headerlink" title="6. 绑定域名（可选）"></a>6. 绑定域名（可选）</h2><p>博客搭建完成使用的是 GitHub 的子域名（用户名.<a href="https://link.zhihu.com/?target=http://github.io">http://github.io</a>），我们可以为 Hexo 博客绑定自己的域名替换 GitHub 域名，更加个性化和专业，也利于 SEO。</p><p>我们使用 <a href="https://link.zhihu.com/?target=https://www.namesilo.com/?rid=d27fa32do">Namesilo</a> 进行注册，便宜好用没啥套路，使用优惠码 <code>okoff</code> 优惠一美元，com 域名大概 50 块一年。</p><h3 id="6-1-域名注册和解析"><a href="#6-1-域名注册和解析" class="headerlink" title="# 6.1 域名注册和解析"></a><strong># 6.1 域名注册和解析</strong></h3><ul><li>域名注册和解析教程：<a href="https://zhuanlan.zhihu.com/p/33921436">Namesilo 域名购买及使用教程</a></li></ul><p>按上面教程注册并解析域名，在 DNS 设置部分，删除自带的记录，然后添加 CNAME 记录将 www 域名解析指向 <code>用户名.github.io</code>。</p><p><img src="https://pic3.zhimg.com/v2-d5d37c8ad523d8ab5c7c200fabc9585e_r.jpg"></p><h3 id="6-2-绑定域名到-Hexo-博客"><a href="#6-2-绑定域名到-Hexo-博客" class="headerlink" title="# 6.2 绑定域名到 Hexo 博客"></a><strong># 6.2 绑定域名到 Hexo 博客</strong></h3><p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <a href="http://www.example.com,保存名称为/">http://www.example.com，保存名称为</a> “CNAME”，格式为 “所有文件”（无 .txt 后缀）。</p><p>清除缓存等文件并重新发布网站：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br></pre></td></tr></table></figure><br>现在就可以使用自己的域名访问 Hexo 博客了。</p><h3 id="6-3-开启-HTTPS"><a href="#6-3-开启-HTTPS" class="headerlink" title="# 6.3 开启 HTTPS"></a><strong># 6.3 开启 HTTPS</strong></h3><p>配置自己的域名后，需要我们手动开启 HTTPS。打开博客所在 GitHub 仓库，Settings -&gt; 下拉找到 GitHub Pages -&gt; 勾选 Enforce HTTPS。</p><p><img src="https://pic4.zhimg.com/v2-54f8744afc9746884e6b3acecfc5f8cf_r.jpg"></p><p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，HTTPS 配置完成！</p><h2 id="7-开始使用"><a href="#7-开始使用" class="headerlink" title="7. 开始使用"></a>7. 开始使用</h2><h3 id="7-1-发布文章"><a href="#7-1-发布文章" class="headerlink" title="# 7.1 发布文章"></a><strong># 7.1 发布文章</strong></h3><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><br>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这两条命令。</strong><br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g   # 生成页面</span><br><span class="line">hexo d   # 部署发布</span><br></pre></td></tr></table></figure></p><hr><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo g</code> 和 <code>hexo d</code> 发布。<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure></p><h3 id="7-2-网站设置"><a href="#7-2-网站设置" class="headerlink" title="# 7.2 网站设置"></a><strong># 7.2 网站设置</strong></h3><p>包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/configuration">官方文档</a>按需要编辑。</p><p>注意：冒号后要加一个空格！</p><h3 id="7-3-更换主题"><a href="#7-3-更换主题" class="headerlink" title="# 7.3 更换主题"></a><strong># 7.3 更换主题</strong></h3><p>在 <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a> 选择一个喜欢的主题，比如 <a href="https://link.zhihu.com/?target=http://theme-next.iissnan.com/getting-started.html">NexT</a>，进入网站目录打开 Git Bash Here 下载主题：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><br>然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。）</p><h3 id="7-4-常用命令"><a href="#7-4-常用命令" class="headerlink" title="# 7.4 常用命令"></a><strong># 7.4 常用命令</strong></h3>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h2 id="8-常见问题"><a href="#8-常见问题" class="headerlink" title="8 常见问题"></a>8 常见问题</h2><p><strong>1、Hexo 设置显示文章摘要，首页不显示全文</strong></p><p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <code>&lt;!--more--&gt;</code> 进行分段。</p><p>该代码前面的内容会作为摘要显示，而后面的内容会替换为 “Read More” 隐藏起来。</p><p><img src="https://pic4.zhimg.com/v2-45701cf120ca77e6733ad30b40666f33_r.jpg"></p><p><strong>2、设置网站图标</strong></p><p>进入 themes&#x2F;主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：<code>favicon: 图标地址</code>。（不同主题可能略有差别）</p><p><strong>3、修改并部署后没有效果</strong></p><p>使用 <code>hexo clean</code> 清理后重新部署。</p><p><strong>4、开启 HTTPS 后访问网站显示连接不安全？</strong></p><p>证书还未部署生效，等待一会儿，清除浏览器缓存再试。</p><p><strong>5、Mac 安装 Hexo 报错无法安装</strong></p><p>Mac 用户需要管理员权限运行，使用 <code>sudo npm install -g hexo-cli</code> 命令安装。</p><p><strong>6、npm 下载速度慢，甚至完全没反应</strong></p><p>使用 npm 安装程序等待很久也没反应，或者下载速度很慢，可以更换 npm 源为国内 npm 镜像。</p><p>临时更换方法：在 npm 安装命令后面加上：<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--registry https://registry.npm.taobao.org </span><br></pre></td></tr></table></figure></p><p>  <a href="https://zhuanlan.zhihu.com/p/60578464?utm_id=0">转载至</a></p>]]></content>
    
    
    <summary type="html">关于hexo博客怎么搭这件事</summary>
    
    
    
    
    <category term="教程" scheme="https://gedongyou.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="hexo" scheme="https://gedongyou.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
